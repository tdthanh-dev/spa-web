import React, { useState, useEffect } from 'react';
import { servicesAPI } from '@/services/api';
import './Settings.css';

const Settings = () => {
  const [settings, setSettings] = useState({
    businessInfo: {
      name: 'Spa Th·∫©m M·ªπ ABC',
      address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
      phone: '0123 456 789',
      email: 'contact@spaspa.com',
      website: 'www.spaspa.com'
    },
    businessHours: {
      monday: { open: '08:00', close: '20:00', closed: false },
      tuesday: { open: '08:00', close: '20:00', closed: false },
      wednesday: { open: '08:00', close: '20:00', closed: false },
      thursday: { open: '08:00', close: '20:00', closed: false },
      friday: { open: '08:00', close: '20:00', closed: false },
      saturday: { open: '08:00', close: '18:00', closed: false },
      sunday: { open: '09:00', close: '17:00', closed: false }
    },
    systemSettings: {
      autoBackup: true,
      backupFrequency: 'daily',
      maxAppointmentPerDay: 50,
      advanceBookingDays: 30,
      smsNotifications: true,
      emailNotifications: true,
      autoReminders: true
    },
    pricingSettings: {
      currency: 'VND',
      taxRate: 8,
      discountThreshold: 1000000,
      loyaltyPointsRate: 1
    }
  });

  const [activeTab, setActiveTab] = useState('business');
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');

  const handleSaveSettings = async () => {
    setLoading(true);
    try {
      // TODO: Implement API call to save settings
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
      setMessage('‚úÖ C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
      setTimeout(() => setMessage(''), 3000);
    } catch (error) {
      setMessage('‚ùå C√≥ l·ªói khi l∆∞u c√†i ƒë·∫∑t. Vui l√≤ng th·ª≠ l·∫°i.');
      setTimeout(() => setMessage(''), 3000);
    } finally {
      setLoading(false);
    }
  };

  const updateBusinessInfo = (field, value) => {
    setSettings(prev => ({
      ...prev,
      businessInfo: {
        ...prev.businessInfo,
        [field]: value
      }
    }));
  };

  const updateBusinessHours = (day, field, value) => {
    setSettings(prev => ({
      ...prev,
      businessHours: {
        ...prev.businessHours,
        [day]: {
          ...prev.businessHours[day],
          [field]: value
        }
      }
    }));
  };

  const updateSystemSettings = (field, value) => {
    setSettings(prev => ({
      ...prev,
      systemSettings: {
        ...prev.systemSettings,
        [field]: value
      }
    }));
  };

  const updatePricingSettings = (field, value) => {
    setSettings(prev => ({
      ...prev,
      pricingSettings: {
        ...prev.pricingSettings,
        [field]: value
      }
    }));
  };

  const renderBusinessTab = () => (
    <div className="settings-section">
      <h3>üè¢ Th√¥ng tin doanh nghi·ªáp</h3>

      <div className="form-grid">
        <div className="form-group">
          <label>T√™n spa:</label>
          <input
            type="text"
            value={settings.businessInfo.name}
            onChange={(e) => updateBusinessInfo('name', e.target.value)}
            className="form-input"
          />
        </div>

        <div className="form-group">
          <label>ƒê·ªãa ch·ªâ:</label>
          <input
            type="text"
            value={settings.businessInfo.address}
            onChange={(e) => updateBusinessInfo('address', e.target.value)}
            className="form-input"
          />
        </div>

        <div className="form-group">
          <label>S·ªë ƒëi·ªán tho·∫°i:</label>
          <input
            type="tel"
            value={settings.businessInfo.phone}
            onChange={(e) => updateBusinessInfo('phone', e.target.value)}
            className="form-input"
          />
        </div>

        <div className="form-group">
          <label>Email:</label>
          <input
            type="email"
            value={settings.businessInfo.email}
            onChange={(e) => updateBusinessInfo('email', e.target.value)}
            className="form-input"
          />
        </div>

        <div className="form-group">
          <label>Website:</label>
          <input
            type="url"
            value={settings.businessInfo.website}
            onChange={(e) => updateBusinessInfo('website', e.target.value)}
            className="form-input"
          />
        </div>
      </div>
    </div>
  );

  const renderHoursTab = () => (
    <div className="settings-section">
      <h3>üïê Gi·ªù l√†m vi·ªác</h3>

      <div className="business-hours">
        {Object.entries(settings.businessHours).map(([day, hours]) => (
          <div key={day} className="day-hours">
            <div className="day-name">
              {day === 'monday' && 'Th·ª© Hai'}
              {day === 'tuesday' && 'Th·ª© Ba'}
              {day === 'wednesday' && 'Th·ª© T∆∞'}
              {day === 'thursday' && 'Th·ª© NƒÉm'}
              {day === 'friday' && 'Th·ª© S√°u'}
              {day === 'saturday' && 'Th·ª© B·∫£y'}
              {day === 'sunday' && 'Ch·ªß Nh·∫≠t'}
            </div>

            <div className="hours-controls">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={!hours.closed}
                  onChange={(e) => updateBusinessHours(day, 'closed', !e.target.checked)}
                />
                M·ªü c·ª≠a
              </label>

              {!hours.closed && (
                <>
                  <input
                    type="time"
                    value={hours.open}
                    onChange={(e) => updateBusinessHours(day, 'open', e.target.value)}
                    className="time-input"
                  />
                  <span>ƒë·∫øn</span>
                  <input
                    type="time"
                    value={hours.close}
                    onChange={(e) => updateBusinessHours(day, 'close', e.target.value)}
                    className="time-input"
                  />
                </>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderSystemTab = () => (
    <div className="settings-section">
      <h3>‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng</h3>

      <div className="form-grid">
        <div className="form-group">
          <label>Sao l∆∞u t·ª± ƒë·ªông:</label>
          <label className="switch">
            <input
              type="checkbox"
              checked={settings.systemSettings.autoBackup}
              onChange={(e) => updateSystemSettings('autoBackup', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>

        <div className="form-group">
          <label>T·∫ßn su·∫•t sao l∆∞u:</label>
          <select
            value={settings.systemSettings.backupFrequency}
            onChange={(e) => updateSystemSettings('backupFrequency', e.target.value)}
            className="form-select"
          >
            <option value="daily">H√†ng ng√†y</option>
            <option value="weekly">H√†ng tu·∫ßn</option>
            <option value="monthly">H√†ng th√°ng</option>
          </select>
        </div>

        <div className="form-group">
          <label>L·ªãch h·∫πn t·ªëi ƒëa/ng√†y:</label>
          <input
            type="number"
            value={settings.systemSettings.maxAppointmentPerDay}
            onChange={(e) => updateSystemSettings('maxAppointmentPerDay', Number(e.target.value))}
            className="form-input"
            min="1"
            max="100"
          />
        </div>

        <div className="form-group">
          <label>ƒê·∫∑t l·ªãch tr∆∞·ªõc t·ªëi ƒëa (ng√†y):</label>
          <input
            type="number"
            value={settings.systemSettings.advanceBookingDays}
            onChange={(e) => updateSystemSettings('advanceBookingDays', Number(e.target.value))}
            className="form-input"
            min="1"
            max="365"
          />
        </div>

        <div className="form-group">
          <label>Th√¥ng b√°o SMS:</label>
          <label className="switch">
            <input
              type="checkbox"
              checked={settings.systemSettings.smsNotifications}
              onChange={(e) => updateSystemSettings('smsNotifications', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>

        <div className="form-group">
          <label>Th√¥ng b√°o Email:</label>
          <label className="switch">
            <input
              type="checkbox"
              checked={settings.systemSettings.emailNotifications}
              onChange={(e) => updateSystemSettings('emailNotifications', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>

        <div className="form-group">
          <label>Nh·∫Øc nh·ªü t·ª± ƒë·ªông:</label>
          <label className="switch">
            <input
              type="checkbox"
              checked={settings.systemSettings.autoReminders}
              onChange={(e) => updateSystemSettings('autoReminders', e.target.checked)}
            />
            <span className="slider"></span>
          </label>
        </div>
      </div>
    </div>
  );

  const renderPricingTab = () => (
    <div className="settings-section">
      <h3>üí∞ C√†i ƒë·∫∑t gi√° c·∫£</h3>

      <div className="form-grid">
        <div className="form-group">
          <label>ƒê∆°n v·ªã ti·ªÅn t·ªá:</label>
          <select
            value={settings.pricingSettings.currency}
            onChange={(e) => updatePricingSettings('currency', e.target.value)}
            className="form-select"
          >
            <option value="VND">VNƒê</option>
            <option value="USD">USD</option>
            <option value="EUR">EUR</option>
          </select>
        </div>

        <div className="form-group">
          <label>Thu·∫ø (%):</label>
          <input
            type="number"
            value={settings.pricingSettings.taxRate}
            onChange={(e) => updatePricingSettings('taxRate', Number(e.target.value))}
            className="form-input"
            min="0"
            max="100"
            step="0.1"
          />
        </div>

        <div className="form-group">
          <label>Ng∆∞·ª°ng gi·∫£m gi√° (VNƒê):</label>
          <input
            type="number"
            value={settings.pricingSettings.discountThreshold}
            onChange={(e) => updatePricingSettings('discountThreshold', Number(e.target.value))}
            className="form-input"
            min="0"
            step="100000"
          />
        </div>

        <div className="form-group">
          <label>T·ª∑ l·ªá t√≠ch ƒëi·ªÉm (VNƒê = 1 ƒëi·ªÉm):</label>
          <input
            type="number"
            value={settings.pricingSettings.loyaltyPointsRate}
            onChange={(e) => updatePricingSettings('loyaltyPointsRate', Number(e.target.value))}
            className="form-input"
            min="0"
            step="0.1"
          />
        </div>
      </div>
    </div>
  );

  return (
    <div className="settings">
      <div className="settings-header">
        <h1>‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng</h1>
        <p>C·∫•u h√¨nh v√† qu·∫£n l√Ω c√†i ƒë·∫∑t c·ªßa spa</p>
      </div>

      {message && (
        <div className={`message ${message.includes('‚úÖ') ? 'success' : 'error'}`}>
          {message}
        </div>
      )}

      <div className="settings-content">
        {/* Tab Navigation */}
        <div className="settings-tabs">
          <button
            className={`tab-btn ${activeTab === 'business' ? 'active' : ''}`}
            onClick={() => setActiveTab('business')}
          >
            üè¢ Doanh nghi·ªáp
          </button>
          <button
            className={`tab-btn ${activeTab === 'hours' ? 'active' : ''}`}
            onClick={() => setActiveTab('hours')}
          >
            üïê Gi·ªù l√†m vi·ªác
          </button>
          <button
            className={`tab-btn ${activeTab === 'system' ? 'active' : ''}`}
            onClick={() => setActiveTab('system')}
          >
            ‚öôÔ∏è H·ªá th·ªëng
          </button>
          <button
            className={`tab-btn ${activeTab === 'pricing' ? 'active' : ''}`}
            onClick={() => setActiveTab('pricing')}
          >
            üí∞ Gi√° c·∫£
          </button>
        </div>

        {/* Tab Content */}
        <div className="tab-content">
          {activeTab === 'business' && renderBusinessTab()}
          {activeTab === 'hours' && renderHoursTab()}
          {activeTab === 'system' && renderSystemTab()}
          {activeTab === 'pricing' && renderPricingTab()}
        </div>

        {/* Save Button */}
        <div className="settings-actions">
          <button
            className="save-btn"
            onClick={handleSaveSettings}
            disabled={loading}
          >
            {loading ? 'ƒêang l∆∞u...' : 'üíæ L∆∞u c√†i ƒë·∫∑t'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default Settings;
