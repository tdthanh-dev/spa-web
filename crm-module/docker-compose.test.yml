# Test Docker Compose Configuration
# Use this for running tests with isolated test databases
# Run with: docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d

version: '3.8'

services:
  # Test PostgreSQL Database
  postgres-test:
    image: postgres:16-alpine
    container_name: crm-postgres-test
    restart: no
    environment:
      POSTGRES_DB: crm_spa_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5433:5432"  # Different port for test
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - crm-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d crm_spa_test"]
      interval: 5s
      timeout: 3s
      retries: 10
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Test Redis
  redis-test:
    image: redis:7-alpine
    container_name: crm-redis-test
    restart: no
    ports:
      - "6380:6379"  # Different port for test
    volumes:
      - redis_test_data:/data
    networks:
      - crm-test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    tmpfs:
      - /tmp
    command: redis-server --appendonly no --save ""

  # Test Application (with test profile)
  app-test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crm-app-test
    restart: no
    environment:
      # Test Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-test:5432/crm_spa_test
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: test123

      # Test Redis Configuration
      SPRING_DATA_REDIS_HOST: redis-test
      SPRING_DATA_REDIS_PORT: 6379

      # JPA Configuration for tests
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      SPRING_JPA_SHOW_SQL: false
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: false

      # Test Profile
      SPRING_PROFILES_ACTIVE: test

      # Application Configuration
      SERVER_PORT: 8082

      # Logging for tests
      LOGGING_LEVEL_ROOT: WARN
      LOGGING_LEVEL_COM_HTTTQL: DEBUG

      # JWT for tests
      JWT_SECRET_KEY: testSecretKey12345678901234567890123456789012345678901234567890

      # Disable heavy features in tests
      SPRING_CACHE_TYPE: simple
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health

    ports:
      - "8082:8082"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - crm-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: ["sh", "-c", "mvn test -Dspring.profiles.active=test"]

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local

networks:
  crm-test-network:
    driver: bridge
